<?php

namespace TRBundle\DataFixtures\ORM;

use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Lthrt\UserBundle\Entity\User;
use Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder;

/**
 * Generated by Webonaute\DoctrineFixtureGenerator.
 *
 */
class LoadUser extends AbstractFixture implements OrderedFixtureInterface
{
    /**
     * Set loading order.
     *
     * @return int
     */
    public function getOrder()
    {
        return 2;
    }

    /**
     * {@inheritDoc}
     */
    public function load(ObjectManager $manager)
    {
        $manager->getClassMetadata(User::class)->setIdGeneratorType(ClassMetadata::GENERATOR_TYPE_NONE);

        $user1           = new User();
        $user1->username = 'Admin';

        $user1->salt     = md5(time());
        $encoder         = new BCryptPasswordEncoder(13);
        $user1->password = $encoder->encodePassword('Admin', $user1->salt);
        $user1->email    = 'admin@timereich.org';
        $user1->active   = true;
        $user1->id       = 1;
        $user1->addRole($this->getReference('ROLE_ADMIN'));
        $this->addReference('_reference_LthrtEntityBundleUser1', $user1);
        $manager->persist($user1);

        $user2           = new User();
        $user2->username = 'User';
        $user2->salt     = md5(time());
        $encoder         = new BCryptPasswordEncoder(13);
        $user2->password = $encoder->encodePassword('User', $user2->salt);
        $user2->email    = 'user@timereich.org';
        $user2->active   = true;
        $user2->id       = 2;
        $user2->addRole($this->getReference('ROLE_USER'));
        $this->addReference('_reference_LthrtEntityBundleUser2', $user2);
        $manager->persist($user2);

        $user3           = new User();
        $user3->username = 'Inactive';
        $user3->salt     = md5(time());
        $encoder         = new BCryptPasswordEncoder(13);
        $user3->password = $encoder->encodePassword('Inactive', $user3->salt);
        $user3->email    = 'inactive@timereich.org';
        $user3->active   = false;
        $user3->id       = 3;
        $user2->addRole($this->getReference('ROLE_USER'));
        $this->addReference('_reference_LthrtEntityBundleUser3', $user3);
        $manager->persist($user3);

        $user4           = new User();
        $user4->username = 'NoRole';
        $user4->salt     = md5(time());
        $encoder         = new BCryptPasswordEncoder(13);
        $user4->password = $encoder->encodePassword('NoRole', $user4->salt);
        $user4->email    = 'norole@timereich.org';
        $user4->active   = true;
        $user4->id       = 4;
        $this->addReference('_reference_LthrtEntityBundleUser4', $user4);
        $manager->persist($user4);

        $user5           = new User();
        $user5->username = 'BadRole';
        $user5->salt     = md5(time());
        $encoder         = new BCryptPasswordEncoder(13);
        $user5->password = $encoder->encodePassword('BadRole', $user5->salt);
        $user5->email    = 'badrole@timereich.org';
        $user5->active   = true;
        $user5->id       = 5;
        $user5->addRole($this->getReference('ROLE_OBSOLETE'));
        $this->addReference('_reference_LthrtEntityBundleUser5', $user5);
        $manager->persist($user5);

        $user6           = new User();
        $user6->username = 'Delete';
        $user6->salt     = md5(time());
        $encoder         = new BCryptPasswordEncoder(13);
        $user6->password = $encoder->encodePassword('Delete', $user6->salt);
        $user6->email    = 'delete@timereich.org';
        $user6->active   = true;
        $user6->id       = 6;
        $user6->addRole($this->getReference('ROLE_OBSOLETE'));
        $this->addReference('_reference_LthrtEntityBundleUser6', $user6);
        $manager->persist($user6);

        $manager->flush();
    }
}
